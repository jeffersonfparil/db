% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import.R
\name{fn_set_classification_of_rows}
\alias{fn_set_classification_of_rows}
\title{Classify the rows of the incoming base or data table to check for intersection/s with existing
data and base data tables in the database}
\usage{
fn_set_classification_of_rows(df, database, table_name, verbose = verbose)
}
\arguments{
\item{df}{data frame representing a base (entries, dates, sites, treatments, traits, abiotics,
and loci) or data (phenotypes, environments and genotypes) table}

\item{database}{an open SQLite database connection}

\item{table_name}{name of the base or data table represented by df}

\item{verbose}{Show messages? (Default=TRUE)}
}
\value{
\itemize{
\item Ok:
$n_existing_rows: total number of rows in the existing table
$n_incoming_rows: total number of rows in the incoming table
$n_intersecting_rows: number of intersecting rows in the existing and incoming table
$n_rows_exclusive_to_existing_table: number of rows exclusive to the existing table
$n_rows_exclusive_to_incoming_table: number of rows exclusive to the incoming table
$vec_bool_rows_exclusive_to_existing_table: vector of booleans referring to rows exclusive
to the existing table
$vec_bool_rows_exclusive_to_incoming_table: vector of booleans referring to rows exclusive
to the incoming table
\item Err: dbError
}
}
\description{
Classify the rows of the incoming base or data table to check for intersection/s with existing
data and base data tables in the database
}
\examples{
list_fnames_tables = fn_simulate_tables(
     n_entries=50,
     n_dates=3,
     n_sites=3,
     n_treatments=3,
     n_loci=10e3,
     save_data_tables=TRUE)$list_fnames_tables
df = utils::read.delim(list_fnames_tables$fname_phenotypes, header=TRUE)
unlink("test.sqlite")
database = DBI::dbConnect(drv=RSQLite::SQLite(), dbname="test.sqlite")
list_df_data_and_base_tables = fn_prepare_data_table_and_extract_base_tables(df=df,
     database=database, table_name="phenotypes", verbose=TRUE)
df = list_df_data_and_base_tables$df_possibly_modified
df_first_half = droplevels(df[1:floor(nrow(df)/2), ])
### Import the first half of the data table into the database
DBI::dbWriteTable(conn=database, name="phenotypes", value=df_first_half)
### Detect row intersections
list_set_classification_of_rows = fn_set_classification_of_rows(df=df,
     database=database, table_name="phenotypes", verbose=TRUE)
DBI::dbDisconnect(database)
unlink("test.sqlite")
}

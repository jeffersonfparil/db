% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{fn_update_database_from_xlsx_or_tsv}
\alias{fn_update_database_from_xlsx_or_tsv}
\title{Update database using an MS Excel file or tab-delimited files}
\usage{
fn_update_database_from_xlsx_or_tsv(
  fname_db,
  fname_xlsx = NULL,
  fname_phenotypes_tsv = NULL,
  fname_environments_tsv = NULL,
  fname_genotypes_tsv = NULL,
  verbose = TRUE
)
}
\arguments{
\item{fname_db}{name of the SQLite database file.}

\item{fname_xlsx}{name of the MS Excel file with 3 tabs where each tab represent one of
the three data tables including the required columns for each. These tabs should be
named "phenotypes", "environments", and "genotypes". A tab can be empty,
e.g. "genotypes" tab can be left empty if the genotype file is massive, in which case
the tab-delimited allele frequency table file may be specified.
See gp::GLOBAL_list_required_colnames_per_table() for the required columns per table.
(Default=NULL)}

\item{fname_phenotypes_tsv}{name of the phenotypes table file. This file is tab-delimited.
See gp::GLOBAL_list_required_colnames_per_table()$phenotypes for the required columns.
(Default=NULL)}

\item{fname_environments_tsv}{name of the environments table file. This file is tab-delimited.
See gp::GLOBAL_list_required_colnames_per_table()$environments for the required columns.
(Default=NULL)}

\item{fname_genotypes_tsv}{name of the allele frequency table file. This is a tab-delimited
file with a header line and the first 3 columns refer to the chromosome (chr), position (pos),
and allele (allele), with subsequent columns referring to the allele frequencies of a sample.
Names of the samples in the header line can be any unique string of characters. (Default=NULL)}

\item{verbose}{Show messages? (Default=TRUE)}
}
\value{
\itemize{
\item Ok: fname_db: filename of the SQLite database file
\item Err: dbError
}
}
\description{
Update database using an MS Excel file or tab-delimited files
}
\examples{
list_fnames_tables = fn_simulate_tables(
        n_entries=50,
        n_dates=3,
        n_sites=3,
        n_treatments=3,
        n_loci=10e3,
        save_data_tables=TRUE)$list_fnames_tables
list_df_initial = list()
list_df_update = list()
for (table_name in GLOBAL_df_valid_tables()$NAME[GLOBAL_df_valid_tables()$CLASS=="data"]) {
    df = as.data.frame(readxl::read_excel(
        path=list_fnames_tables$fname_data_tables, 
        sheet=table_name, 
        guess_max=round(0.01*.Machine$integer.max)), 
        check.names=FALSE)
    n = nrow(df)
    eval(parse(text=paste0("list_df_initial$", table_name, " = df[1:ceiling(n/2), ]")))
    eval(parse(text=paste0("list_df_update$", table_name, " = df[(ceiling(n/2)+1):n, ]")))
}
fname_xlsx_initial = "test_initial.xlsx"
fname_xlsx_update = "test_update.xlsx"
writexl::write_xlsx(x=list_df_initial, path=fname_xlsx_initial)
writexl::write_xlsx(x=list_df_update, path=fname_xlsx_update)
### Initialise the database
fn_create_database_from_xlsx_or_tsv(fname_xlsx=fname_xlsx_initial)
### Update
fname_xlsx = fname_xlsx_update
fname_db = gsub(".xlsx$", ".sqlite", fname_xlsx_initial)
fn_update_database_from_xlsx_or_tsv(fname_xlsx=fname_xlsx, fname_db=fname_db)
unlink(fname_xlsx_initial)
unlink(fname_xlsx_update)
unlink(fname_db)
}

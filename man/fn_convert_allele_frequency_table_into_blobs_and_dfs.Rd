% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import.R
\name{fn_convert_allele_frequency_table_into_blobs_and_dfs}
\alias{fn_convert_allele_frequency_table_into_blobs_and_dfs}
\title{Extract entries, loci, and genotypes tables from an allele frequency table}
\usage{
fn_convert_allele_frequency_table_into_blobs_and_dfs(
  df,
  database,
  table_name = "genotypes",
  verbose = TRUE
)
}
\arguments{
\item{df}{allele frequency table in data frame format:
read from a tab-delimited file with a header line and the first 3 columns refer to the
chromosome (chr), position (pos), and allele (allele),
with subsequent columns referring to the allele frequencies of a sample, entry or pool.
Names of the samples, entries, or pools in the header line can be any unique string of characters.}

\item{database}{an open SQLite database connection}

\item{table_name}{name of the data table, i.e. the "genotypes" table (Default="genotypes")}

\item{verbose}{Show messages? (Default=TRUE)}
}
\value{
\itemize{
\item Ok:
$df_genotypes: 2-column genotypes table or data frame. The first column is the ENTRY_UID
checked for redundancy if an existing "entries" table exist in the database. The second
column is the serialised allele frequencies per entry, i.e. a vector of raw bytes is
stored per row of the data frame.
$df_loci: "loci" base table or data frame
$df_entries: "entries" base table or data frame
\item Err: dbError
}
}
\description{
Extract entries, loci, and genotypes tables from an allele frequency table
}
\examples{
list_fnames_tables = fn_simulate_tables(
     n_entries=50,
     n_dates=3,
     n_sites=3,
     n_treatments=3,
     n_loci=10e3,
     save_data_tables=TRUE)$list_fnames_tables
df = utils::read.delim(list_fnames_tables$fname_genotypes, header=TRUE)
database = DBI::dbConnect(drv=RSQLite::SQLite(), dbname="test.sqlite")
list_df_genotypes_df_loci_df_entries = fn_convert_allele_frequency_table_into_blobs_and_dfs(df=df, 
     database=database, table_name="genotypes", verbose=TRUE)
DBI::dbDisconnect(database)
unlink("test.sqlite")
}

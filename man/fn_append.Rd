% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import.R
\name{fn_append}
\alias{fn_append}
\title{Append data into existing data table in the database}
\usage{
fn_append(df, database, table_name, verbose = TRUE)
}
\arguments{
\item{df}{data frame representing a base (entries, dates, sites, treatments, traits, abiotics,
and loci) or data (phenotypes, environments and genotypes) table}

\item{database}{an open SQLite database connection}

\item{table_name}{name of the base or data table represented by df}

\item{verbose}{Show messages? (Default=TRUE)}
}
\value{
\itemize{
\item Ok: database - the same open SQLite database connection from the input
\item Err: dbError
}
}
\description{
Append data into existing data table in the database
}
\details{
Note that it is easier to:
(1) replace the entire table, i.e. when the source table is a complete superset of the destination table, and
(2) add new rows
}
\examples{
list_fnames_tables = fn_simulate_tables(
     n_entries=50,
     n_dates=3,
     n_sites=3,
     n_treatments=3,
     n_loci=10e3,
     save_data_tables=TRUE)$list_fnames_tables
df = utils::read.delim(list_fnames_tables$fname_phenotypes, header=TRUE)
database = DBI::dbConnect(drv=RSQLite::SQLite(), dbname="test.sqlite")
### Prepare the tables
list_df_data_and_base_tables = fn_prepare_data_table_and_extract_base_tables(df=df, 
     database=database, table_name="phenotypes", verbose=TRUE)
df = list_df_data_and_base_tables$df_possibly_modified
n = nrow(df); p = ncol(df)
vec_idx_columns_HASH_UID_and_required = which(colnames(df) \%in\% c("PHENOTYPE_HASH", "PHENOTYPE_UID",
     GLOBAL_list_required_colnames_per_table()$phenotypes))
df_q1 = droplevels(df[1:floor(n/2),     1:floor(p/2)])
df_q2 = droplevels(df[1:floor(n/2),     c(vec_idx_columns_HASH_UID_and_required, (floor(p/2)+1):p)])
df_q3 = droplevels(df[(floor(n/2)+1):n, c(vec_idx_columns_HASH_UID_and_required, (floor(p/2)+1):p)])
df_q4 = droplevels(df[(floor(n/2)+1):n, 1:floor(p/2)])
### Import the df_q1 into the database
DBI::dbWriteTable(conn=database, name="phenotypes", value=df_q1)
### Add new rows and columns, i.e. df_q3
database = fn_append(df=df_q3, database=database, table_name="phenotypes", verbose=TRUE)
### Add df_q2
database = fn_append(df=df_q2, database=database, table_name="phenotypes", verbose=TRUE)
### Add df_q4
database = fn_append(df=df_q4, database=database, table_name="phenotypes", verbose=TRUE)
DBI::dbDisconnect(database)
unlink("test.sqlite")
}
